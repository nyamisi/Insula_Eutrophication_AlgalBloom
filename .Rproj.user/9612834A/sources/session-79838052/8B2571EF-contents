---
title: "Plotting and Visualization"
subtitle: "Grammar of graphics"
author: "Nyamisi Peter"
date: "2024-03-28"
format: 
    revealjs:
      standalone: true
      embed-resources: true
      reference-location: document
      theme: serif
      highlight-style: ayu-mirage
execute: 
  echo: true
  warning: false
  message: false
  comment: ""

slide-number: true
theme: "journal"
code-fold: false
scrollable: true
code-line-numbers: true
bibliography: ref.bib
css: style.css
---

## [Learning Agenda]{style="background: #433E49; color: #ABDFF1"} {.scrollable}

1. [Get familiar with R and Rstudio]{style="background: #E1DDDB; color: gray"} 
1. [Data structure and data types]{style="background: #E1DDDB; color: gray"} 
1. [Reading and writing data in Rstudio]{style="background: #E1DDDB; color: gray"} 
1. [Tidying and Data manipulation with tidyverse]{style="background: #E1DDDB; color: gray"} 
1. [Plotting and Visualization]{style="background: maroon; color: white"}
1. [Descriptive Statistics]{style="background: #E1DDDB; color: gray"} 
1. [Inferential Statistics]{style="background: #E1DDDB; color: gray"} 
1. [Modelling and simulation]{style="background: #E1DDDB; color: gray"} 
1. [Spatial Handling and Analysis]{style="background: #E1DDDB; color: gray"} 


## [Package]{style="background: #433E49; color: #ABDFF1"} 

```{r}
require(tidyverse)
```

## [Data]{style="background: #433E49; color: #ABDFF1"}

```{r}
penguin.data = read_csv("penguin_data.csv") %>% drop_na()
penguin.data
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm)) +
  geom_histogram()
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}

ggplot(data = penguin.data, aes(x = flipper_length_mm)) +
  geom_histogram(color = "white")
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(color = "white", bins = 15)
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(bins = 15, color = "white", fill = "blue")
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm, fill = species))+
  geom_histogram(bins = 15, color = "white")
```

## [Histogram]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm, fill = island))+
  geom_histogram(bins = 15, color = "white")
```

## [Faceting]{style="background: #433E49; color: #ABDFF1"}

+ Faceting allows to create multiple plots, each representing a subset of the data based on one or more variables. 

+ This is often used to create small multiples, making it easier to compare different aspects of the data.

## [Faceting]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm, fill = species))+
  geom_histogram(bins = 15, color = "white") +
  facet_wrap(~species, nrow = 3)
```

## [Scales]{style="background: #433E49; color: #ABDFF1"}

+ Scales determine the range of values represented on the axes, the colors used in the plot, the size of plotted points, etc.

## [Scales]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm, fill = species))+
  geom_histogram(bins = 15, color = "white") +
  facet_wrap(~species, nrow = 3, scales = "free_y")
```

## [Scales]{style="background: #433E49; color: #ABDFF1"}


```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm, fill = species))+
  geom_histogram(bins = 15, color = "white") +
  facet_wrap(~species, nrow = 3, scales = "free_y")+
  scale_x_continuous(breaks = seq(170,240,10))
```


## [Theme]{style="background: #433E49; color: #ABDFF1"}

+ Themes in **ggplot2** control the overall appearance of the plot
+ It include elements such as axis labels, titles, grid lines, and background colors.
+ Themes can be customized to create visually appealing and consistent plots.

## [Theme]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(bins = 15, color = "white", fill = "blue") +
  theme_bw()
```


## [Theme]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(bins = 15, color = "white", fill = "blue") +
  theme(panel.background = element_rect(fill = NA, color = "black")) 
```

## [Theme]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(bins = 15, color = "white", fill = "blue") +
  theme(panel.background = element_rect(fill = NA, color = "black"),
        axis.text = element_text(colour = "black", size = 11)) 
```

## [Plot labels]{style="background: #433E49; color: #ABDFF1"}

+ In **ggplot2**, the `labs()` function is used to customize the labels and titles of various components within a plot. 

+ It stands for *labels* and allows you to modify the labels for the **x** and **y** axes, as well as the **plot title, subtitle**, and **caption**.

## [Plot labels]{style="background: #433E49; color: #ABDFF1"}

```{r}
ggplot(data = penguin.data, aes(x = flipper_length_mm))+
  geom_histogram(bins = 15, color = "white", fill = "blue") +
  theme(panel.background = element_rect(fill = NA, color = "black"),
        axis.text = element_text(colour = "black", size = 11)) +
  labs(x = "Flipper length (mm)",
       y = "Frequency",
       title = "The histogram showing the Penguin flipper length")
```

## Boxplot plot


```{r}
ggplot(data = penguin.data, aes(x = species, y = bill_length_mm)) +
  geom_boxplot()
```

## Boxplot plot


```{r}
ggplot(data = penguin.data, aes(x = species, y = bill_length_mm, fill = sex)) +
  geom_boxplot()+
  theme_bw()
```

## Legend Position

+ In **ggplot2**, you can control the position of the legend using the `theme()` function along with the `legend.position` argument. 
+ The legend.position argument allows you to specify where the legend should be placed relative to the plot area.
+ The position might be "top", "bottom", "left", "right"
+ You can also specify and custom position for the legend using coordinates.



## Legend Position

```{r}
ggplot(data = penguin.data, aes(x = species, y = bill_length_mm, fill = sex)) +
  geom_boxplot()+
  theme_bw()+
  theme(legend.position = "top")
```

## Legend Position

+ For example, you can use `legend.position = c(0.85, 0.18)` to place the legend at coordinates (0.85, 0.18) within the plot area.

## Legend Position

```{r}
ggplot(data = penguin.data, aes(x = species, y = bill_length_mm, fill = sex)) +
  geom_boxplot()+
  theme_bw()+
  theme(legend.position = c(0.85,0.18))
```


